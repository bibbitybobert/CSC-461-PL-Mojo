from board import Board
from python import Python
from basicAI import basic_ai
from avgAI import max_ai
from minmaxAI import min_max_ai

def AI_v_AI(playBoard: Board) -> Board:
    var selfPlayBoard: Board = playBoard
    selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
    print('What types of AI would you like to pit against each other??')
    var ai1_type: String = 'max'
    var ai2_type: String = 'max'

    ai1_type = Python.evaluate("input('AI player 1 (random, minmax, max):>').lower()").__str__()
    ai2_type = Python.evaluate("input('AI player 2 (random, minmax, max):>').lower()").__str__()


    var ai1: stdAI = stdAI(1, 2, ai1_type[0:2])
    var ai2: stdAI = stdAI(2, 1, ai2_type[0:2])
    
    var i = 0
    while True:
        # print('i: ' + String(i))
        Python.evaluate('input()')
        let ai1Choice = ai1.choice(selfPlayBoard)
        # print('ai1 Choice: ' + String(ai1Choice))
        var unusedBool = selfPlayBoard.playPiece(1, ai1Choice)
        selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
        if selfPlayBoard.checkForWinner():
            # print('AI 1 WINS!!!!')
            return selfPlayBoard

        let ai2Choice = ai2.choice(selfPlayBoard)
        unusedBool = selfPlayBoard.playPiece(2, ai2Choice)
        selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
        if selfPlayBoard.checkForWinner():
            # print('AI 2 WINS!!!!')
            return selfPlayBoard
        i += 1

    return selfPlayBoard

struct stdAI:
    var selfType: String
    var selfrand: basic_ai
    var selfMinMax: min_max_ai
    var selfMax: max_ai
    fn __init__(inout self, id: Int, oppid: Int, type: String):
        self.selfType = type
        self.selfrand = basic_ai(id)
        self.selfMinMax = min_max_ai(id, oppid)
        self.selfMax = max_ai(id, oppid)


    def choice(inout self, board: Board) -> Int:
        if self.selfType == 'ra':
            return self.selfrand.makeChoice(board)
        elif self.selfType == 'mi':
            return self.selfMinMax.makeChoice(board)
        elif self.selfType == 'ma':
            return self.selfMax.makeChoice(board)
        else:
            print('ERROR')
            return -1



def main():
    var board: Board = Board(7, 7, 4, 1, 2)
    board = AI_v_AI(board)
        