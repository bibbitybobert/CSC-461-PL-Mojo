from board import Board
from python import Python
from basicAI import basic_ai
from avgAI import max_ai
from minmaxAI import min_max_ai
from history import History
import commandLine


def AI_v_AI(playBoard: Board) -> History:
    var playHist: History = History(6 * 7 + 10)
    var selfPlayBoard: Board = playBoard
    #selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
    print('What types of AI would you like to pit against each other??')
    var ai1_type: String = 'random'
    var ai2_type: String = 'random'

    input = Python.import_module("builtins").input

    ai1_type = input('AI player 1 (e, m, h):> ').__str__()
    ai2_type = input('AI player 2 (e, m, h):> ').__str__()


    var ai1: stdAI = stdAI(1, 2, ai1_type)
    var ai2: stdAI = stdAI(2, 1, ai2_type)
    
    var i = 0
    while True:
        let ai1Choice = ai1.choice(selfPlayBoard)
        playHist.addMove(ai1Choice, 0)
        var unusedBool = selfPlayBoard.playPiece(0, ai1Choice)
        #selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
        if selfPlayBoard.checkForWinner():
            # print('AI 1 WINS!!!!')
            return playHist

        #input()

        let ai2Choice = ai2.choice(selfPlayBoard)
        playHist.addMove(ai2Choice, 1)
        unusedBool = selfPlayBoard.playPiece(1, ai2Choice)
        #selfPlayBoard.printBoard(selfPlayBoard.__rows, selfPlayBoard.__cols)
        if selfPlayBoard.checkForWinner():
            # print('AI 2 WINS!!!!')
            return playHist
        i += 1

struct stdAI:
    var selfType: String
    var selfrand: basic_ai
    var selfMinMax: min_max_ai
    var selfMax: max_ai
    fn __init__(inout self, id: Int, oppid: Int, type: String):
        self.selfType = type
        self.selfrand = basic_ai(id)
        self.selfMinMax = min_max_ai(id, oppid)
        self.selfMax = max_ai(id, oppid)


    def choice(inout self, board: Board) -> Int:
        if self.selfType == 'e':
            return self.selfrand.makeChoice(board)
        elif self.selfType == 'm':
            return self.selfMinMax.makeChoice(board)
        elif self.selfType == 'h':
            return self.selfMax.makeChoice(board)
        else:
            print('ERROR')
            return -1
